// MODULE 2
//*** This module handles allocation and deallocation of memory pages ***//

//___________________*** Functions ***_______________________//
// 1 : GET_FREE_PAGE    : NIL               : Free page number
// 2 : RELEASE_PAGE     : Page number       : NIL
// 3 : GET_FREE_BLOCK   : NIL               : Free block number or -1
// 4 : RELEASE_BLOCK    : Block number, PID : NIL
// 5 : GET_CODE_PAGE    : Block number      : Page number
// 6 : GET_SWAP_BLOCK   : NIL               : Block number
//___________________________________________________________//

//_______ SPL Variables ______//
alias function_num R1;
alias arg1 R2;
alias arg2 R3;
alias iter R4;
alias page_number R5;
alias PID R6;
alias jter R7;
alias free_page R8;
//____________________________//


PID = [SYSTEM_STATUS_TABLE + 1];

//--------------------------------------------- RELEASE_BLOCK -------------------------------------------------------------------------//
if (function_num == RELEASE_BLOCK) then
    // Decrement disk free list
    [DISK_FREE_LIST + arg1] = [DISK_FREE_LIST + arg1] - 1;
    return;
endif;
//------------------------------------------------------------------------------------------------------------------------------------//

//--------------------------------------------- GET_FREE_PAGE -------------------------------------------------------------------------//
if (function_num == GET_FREE_PAGE) then
    // Increment WAIT_MEM_COUNT
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;

    // If no memory is available schedule another process
    while ([SYSTEM_STATUS_TABLE + 2] == 0) do

        // set state as waiting for memory
        [PROCESS_TABLE + 16*PID + 4] = WAIT_MEM;
        multipush(R1,R3,R4,R6);
        //  //  //  //  
        call SCHEDULER;
        //  //  //  //  
        multipop(R1,R3,R4,R6);

    endwhile;

    // Decrement WAIT_MEM_COUNT as there is atleast one free memory block available
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    // Decrement MEM_FREE_COUNT
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;  

    // Select a free page from memory by inspecting MEMORY_FREE_LIST
    iter = 83;

    // User memory pages are designated from 83 to 127 (see memory_map.txt)
    while (iter <= 127) do

        // If iter corresponds to a free page
        if ([MEMORY_FREE_LIST+iter] == 0) then
            [MEMORY_FREE_LIST+iter] = 1;
            R0 = iter;
            return;
        endif;
        iter = iter + 1;
    endwhile;
    
endif;
//--------------------------------------------------------------------------------------------------------------------------------------//


//------------------------------------------------ RELEASE_PAGE ----------------------------------------------------------------------//
if (function_num == RELEASE_PAGE) then

    // Page to be released is in R2
    page_number = R2;

    // Decrement MEMORY_FREE_LIST entry
    [MEMORY_FREE_LIST + page_number] = [MEMORY_FREE_LIST + page_number]-1;

    // If the memory page becomes totally free Increment MEM_FREE_COUNT
    if ([MEMORY_FREE_LIST + page_number] == 0) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;

        // check if any processes are in WAIT_MEM state and change them to ready
        iter = 0;
        while (iter < MAX_PROC_NUM) do
            if ([PROCESS_TABLE + 16*iter + 4] == WAIT_MEM) then
                [PROCESS_TABLE + 16*iter + 4] = READY;
            endif;
            iter = iter+1;
        endwhile;
    endif;
    return;
endif;
//-----------------------------------------------------------------------------------------------------------------------------------//


//------------------------------------------------------ GET_CODE_PAGE ----------------------------------------------------------------//
// arg1 : block number
if (function_num == GET_CODE_PAGE) then

    // Try to find the code page by checking all the disk map entries
    iter = 0;
    
    while (iter < MAX_PROC_NUM) do
        if (iter != PID) then
            if ([PROCESS_TABLE + iter*16 + 4] != TERMINATED) then
                jter = 4;

                // size of disk map table is 10 words
                while (jter <= 7) do

                    if (arg1 == [DISK_MAP_TABLE + 10*iter + jter]) then
                        // Just because disk map table has an entry may not mean it is loaded already
                        // check page table to ensure it is loaded

                        // store page number of code copy found
                        R0 = [PTBR + 20*iter + 2*jter];
                        if ([R0 + 1] != "0000") then  // the page is loaded
                            // Increment MEMORY_FREE_LIST
                            [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
                            return;
                            
                        endif;
                    endif;
                    jter = jter+1;
                endwhile;
            endif;
        endif;
        iter = iter+1;
    endwhile;

    // If no pre-loaded code page was found load a new one yourself

    multipush(R1,R2,R3,R4,R5,R6,R7);
    R1 = GET_FREE_PAGE;
    //  //  //  //  //  //
    call MEMORY_MANAGER;
    //  //  //  //  //  //
    multipop(R1,R2,R3,R4,R5,R6,R7);
    free_page = R0;


    multipush(R1,R2,R3,R4,R5,R6,R7,R8);
    R1 = DISK_LOAD;
    R4 = R2;    // arg1 (block number)
    R2 = PID;
    R3 = free_page;
    //  //  //  //  //
    call DEVICE_MANAGER;
    //  //  //  //  //
    multipop(R1,R2,R3,R4,R5,R6,R7,R8);
    R0 = free_page;
    
    return;

endif;
//------------------------------------------------------------------------------------------------------------------------------------//
