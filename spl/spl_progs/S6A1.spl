// load init from disk 7-8 to memory 65-66
loadi(65, 7);
loadi(66, 8);

// load INT10 module from disk 35-36 to memory 22-23
loadi(22, 35);
loadi(23, 36);

// load exception handler from disk 15-16 to memory 2-3
loadi(2, 15);
loadi(3, 16);

// setup page table
// here we will assume standard page table of length 10
PTBR = PAGE_TABLE_BASE;
PTLR = 10;

// Pages 65 and 66 are reserved for init code
// which are  mapped to pages 4 and 5 in virtual memory.
// Use page 76 (first of the pages reserved 
// for user programs) for loading the stack segment at virtual page 8
[PTBR+1] = "0000";
[PTBR+3] = "0000";
[PTBR+5] = "0000";
[PTBR+7] = "0000";
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+13] = "0000";
[PTBR+15] = "0000";
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+19] = "0000";

// before running iret the logical address to the start of the code 
// in this case - 2048(page 4)
// should be set up as the top of the stack
[76*512] = 2048;

// stack pointer should be set in logical address
SP = 8*512;

ireturn;
