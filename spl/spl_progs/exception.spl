//_________________________________***_Exception_Handler_***____________________________________//


// Set mode flag //
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = -1;

// Save UPTR
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

// Switch to kernel stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

backup;
// Push EIP onto stack
multipush(EIP);

//  If the cause of the exception is other than page fault (EC is not equal to 0) or if the user stack is full
if (EC != 0 || [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] == PTLR * 512 - 1) then
	if ([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] == PTLR * 512 - 1) then
		print "stack full";
	endif;
	if (EC == 1) then
		print "Illegal inst";
	endif;
	if (EC == 2) then
		print "Illegal mem";
	endif;
	if (EC == 3) then
		print "Arithmetic";
	endif;

	// Then invoke the Exit Process function to halt the process and invoke the scheduler. 
	R1 = EXIT_PROCESS;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call PROCESS_MANAGER;

	call SCHEDULER;
endif;

// If page fault is caused due to a code page, then get the code block number to be loaded from the disk map table
if (EPN >= 4 && EPN <= 7) then
	// invoke the Get Code Page function present in the memory manager module.
	alias PID R3;
	PID = [SYSTEM_STATUS_TABLE + 1];
	multipush(R3);
	R1 = GET_CODE_PAGE;
	R2 = [DISK_MAP_TABLE + PID * 10 + EPN];
	call MEMORY_MANAGER;
	
	multipop(R3);
	// Update the page table entry for this code 
	[PTBR + 2 * EPN] = R0;
	[PTBR + 2 * EPN + 1] = "1100";
	
endif;

// If page fault is caused due to a heap page, then invoke the Get Free Page function present in the memory manager module. 
if (EPN == 2 || EPN == 3) then
	R1 = GET_FREE_PAGE;
	call MEMORY_MANAGER;
	[PTBR + 2 * EPN] = R0;
	[PTBR + 2 * EPN + 1] = "1110";
endif;

// Reset mode flag //
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

multipop(EIP);
restore;

// Restore SP
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];

// Increment the stack pointer, store the EIP value onto the location pointed to by SP and return to the user mode.
SP = SP + 1;
[[PTBR + 2 * (SP / 512)] * 512 + (SP % 512)] = EIP;


ireturn;