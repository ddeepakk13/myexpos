// MOD 7 - Boot Module
loadi(54, 67);
loadi(55, 68);

// MOD 5 - Scheduler
loadi(50,63);
loadi(51,64);

// Idle
loadi(69,11);
loadi(70,12);

//-------- Initialize Process state --------//
[PROCESS_TABLE + 0*16 + 4] = TERMINATED;
[PROCESS_TABLE + 1*16 + 4] = TERMINATED;
[PROCESS_TABLE + 2*16 + 4] = TERMINATED;
[PROCESS_TABLE + 3*16 + 4] = TERMINATED;
[PROCESS_TABLE + 4*16 + 4] = TERMINATED;
[PROCESS_TABLE + 5*16 + 4] = TERMINATED;
[PROCESS_TABLE + 6*16 + 4] = TERMINATED;
[PROCESS_TABLE + 7*16 + 4] = TERMINATED;
[PROCESS_TABLE + 8*16 + 4] = TERMINATED;
[PROCESS_TABLE + 9*16 + 4] = TERMINATED;
[PROCESS_TABLE + 10*16 + 4] = TERMINATED;
[PROCESS_TABLE + 11*16 + 4] = TERMINATED;
[PROCESS_TABLE + 12*16 + 4] = TERMINATED;
[PROCESS_TABLE + 13*16 + 4] = TERMINATED;
[PROCESS_TABLE + 14*16 + 4] = TERMINATED;
[PROCESS_TABLE + 15*16 + 4] = TERMINATED;
//------------------------------------------//

SP = 81*512 - 1;    // Idle stack is used while calling boot module

call BOOT_MODULE;

//<------------------------------- Idle --------------------------------------->//

//<------------- Page table --------------->//
PTBR = PAGE_TABLE_BASE;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";
//<----------------------------------------->//

//<----------- Process table --------------->//
// PID
[PROCESS_TABLE + 1] = 0;
// State field
[PROCESS_TABLE + 4] = RUNNING;
// User area page number
[PROCESS_TABLE + 11] = 82;
// KPTR
[PROCESS_TABLE + 12] = 0;
// UPTR
[PROCESS_TABLE + 13] = 8 * 512;
// PTBR
[PROCESS_TABLE + 14] = PTBR;
// PTLR
[PROCESS_TABLE + 15] = PTLR;
//<----------------------------------------->//

//<-------- System status table ------------>//
[SYSTEM_STATUS_TABLE + 1] = 0;
//<----------------------------------------->//

// set SP to logical address
SP = 8*512;

// Copy entry point to top of stack
[81 * 512] = [69 * 512 + 1];
//<----------------------------------------------------------------------------->//


ireturn;