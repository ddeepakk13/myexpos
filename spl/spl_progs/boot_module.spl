// Init
loadi(65, 7);
loadi(66, 8);

// INT 10
loadi(22, 35);
loadi(23, 36);

// INT 7
loadi(16,29);
loadi(17,30);

// MOD 0 - Resource Manager
loadi(40,53);
loadi(41,54);

// MOD 4 - Device Manager
loadi(48,61);
loadi(49,62);

// Initialize terminal to be free
[TERMINAL_STATUS_TABLE + 0] = 0;

// Exception handler
loadi(2, 15);
loadi(3, 16);

// eXpOS library
loadi(63,13);
loadi(64,14);

// Timer interrupt
loadi(4, 17);
loadi(5, 18);

//<-------------------------------- Even --------------------------------------->//

// Even
loadi(83, 69);

//<------------- Page table --------------->//
PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 84;
[PTBR+5] = "0110";
[PTBR+6] = 85;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 83;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 86;
[PTBR+17] = "0110";
[PTBR+18] = 87;
[PTBR+19] = "0110";
//<----------------------------------------->//

//<----------- Process table --------------->//
// PID
[PROCESS_TABLE + 2*16 + 1] = 2;
// State field
[PROCESS_TABLE + 2*16 + 4] = CREATED;
// User area page number
[PROCESS_TABLE + 2*16 + 11] = 88;
// KPTR
[PROCESS_TABLE + 2*16 + 12] = 0;
// UPTR
[PROCESS_TABLE + 2*16 + 13] = 8 * 512;
// PTBR
[PROCESS_TABLE + 2*16 + 14] = PTBR;
// PTLR
[PROCESS_TABLE + 2*16 + 15] = PTLR;
//<----------------------------------------->//

// Copy entry point to top of stack
[86 * 512] = [83 * 512 + 1];

//<----------------------------------------------------------------------------->//

//<-------------------------------- Prime --------------------------------------->//

// Prime
loadi(89, 70);

//<------------- Page table --------------->//
PTBR = PAGE_TABLE_BASE + 20*3;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 90;
[PTBR+5] = "0110";
[PTBR+6] = 91;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 89;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 92;
[PTBR+17] = "0110";
[PTBR+18] = 93;
[PTBR+19] = "0110";
//<----------------------------------------->//

//<----------- Process table --------------->//
// PID
[PROCESS_TABLE + 3*16 + 1] = 3;
// State field
[PROCESS_TABLE + 3*16 + 4] = CREATED;
// User area page number
[PROCESS_TABLE + 3*16 + 11] = 94;
// KPTR
[PROCESS_TABLE + 3*16 + 12] = 0;
// UPTR
[PROCESS_TABLE + 3*16 + 13] = 8 * 512;
// PTBR
[PROCESS_TABLE + 3*16 + 14] = PTBR;
// PTLR
[PROCESS_TABLE + 3*16 + 15] = PTLR;
//<----------------------------------------->//

// Copy entry point to top of stack
[92 * 512] = [89 * 512 + 1];

//<----------------------------------------------------------------------------->//


//<-------------------------------- Init --------------------------------------->//

//<------------- Page table --------------->//
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";
//<----------------------------------------->//

//<----------- Process table --------------->//
// PID
[PROCESS_TABLE + 16 + 1] = 1;
// State field
[PROCESS_TABLE + 16 + 4] = CREATED;
// User area page number
[PROCESS_TABLE + 16 + 11] = 80;
// KPTR
[PROCESS_TABLE + 16 + 12] = 0;
// UPTR
[PROCESS_TABLE + 16 + 13] = 8 * 512;
// PTBR
[PROCESS_TABLE + 16 + 14] = PTBR;
// PTLR
[PROCESS_TABLE + 16 + 15] = PTLR;
//<----------------------------------------->//

// Copy entry point to top of stack
[76 * 512] = [65 * 512 + 1];
//<----------------------------------------------------------------------------->//

return;