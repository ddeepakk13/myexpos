// Disk Free List
loadi(61, 2);

// Init
loadi(65, 7);
loadi(66, 8);

// INT 6 - Read
loadi(14,27);
loadi(15,28);

// INT 7 - Write
loadi(16,29);
loadi(17,30);

// INT 9 - Exec
loadi(20,33);
loadi(21,34);

// INT 10
loadi(22, 35);
loadi(23, 36);

// MOD 0 - Resource Manager
loadi(40,53);
loadi(41,54);

// MOD 1 - Process Manager
loadi(42,55);
loadi(43,56);

// MOD 2 - Memory Manager
loadi(44,57);
loadi(45,58);

// MOD 4 - Device Manager
loadi(48,61);
loadi(49,62);

// Exception handler
loadi(2, 15);
loadi(3, 16);

// eXpOS library
loadi(63,13);
loadi(64,14);

// Timer interrupt
loadi(4, 17);
loadi(5, 18);

// Disk interrupt
loadi(6, 19);
loadi(7, 20);

// Console interrupt
loadi(8, 21);
loadi(9, 22);

// Inode Table
loadi (59, 3);
loadi (60, 4);

// Initialize DISK_STATUS_TABLE
[DISK_STATUS_TABLE + 0] = 0;

// Initialize MEMORY_FREE_LIST
alias iter R1;
iter = 0;

while (iter < NUM_MEM_PAGES) do
    if (iter >= 83 && iter <= 127) then
        [MEMORY_FREE_LIST + iter] = 0;
    else
        [MEMORY_FREE_LIST + iter] = 1;
    endif;
    iter = iter + 1;
endwhile;

// Initialize WAIT_MEM to 0
[SYSTEM_STATUS_TABLE + 3] = 0;

// initialize MEM_FREE_COUNT to 127-83+1
[SYSTEM_STATUS_TABLE + 2] = 45;

// Initialize terminal to be free
[TERMINAL_STATUS_TABLE + 0] = 0;

//<-------------------------------- Init --------------------------------------->//

//<------------- Page table --------------->//
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";
//<----------------------------------------->//

//<----------- Disk Map table --------------->//
[DISK_MAP_TABLE + 10 + 4] = 65;
[DISK_MAP_TABLE + 10 + 5] = 66;
//<------------------------------------------>//

//<----------- Process table --------------->//
// PID
[PROCESS_TABLE + 16 + 1] = 1;
// State field
[PROCESS_TABLE + 16 + 4] = CREATED;
// User area page number
[PROCESS_TABLE + 16 + 11] = 80;
// KPTR
[PROCESS_TABLE + 16 + 12] = 0;
// UPTR
[PROCESS_TABLE + 16 + 13] = 8 * 512;
// PTBR
[PROCESS_TABLE + 16 + 14] = PTBR;
// PTLR
[PROCESS_TABLE + 16 + 15] = PTLR;
//<----------------------------------------->//

// Initialize per-process resource table for init
R9 = [PROCESS_TABLE + 1 * 16 + 11];
iter = R9 * 512 + 512 - 16;
while (iter < (R9 * 512 + 512)) do
    [iter] = -1;
    iter = iter + 1;
endwhile;

// Copy entry point to top of stack
[76 * 512] = [65 * 512 + 1];
//<----------------------------------------------------------------------------->//

return;